import streamlit as st
import pandas as pd
import os
import io
import matplotlib.pyplot as plt
import seaborn as sns
from langchain_openai import OpenAI
from langchain.agents.agent_types import AgentType
from langchain_experimental.agents.agent_toolkits import create_csv_agent
from dotenv import load_dotenv

# Carrega a vari√°vel de ambiente (Chave da API)
load_dotenv()

# --- Configura√ß√µes Iniciais e Layout do Streamlit ---

st.set_page_config(
    page_title="Agente Inteligente de EDA para Fraudes",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üí≥ Agente de An√°lise de Transa√ß√µes de Cart√£o de Cr√©dito")
st.markdown("Este agente √© especializado em **An√°lise Explorat√≥ria de Dados (EDA)**, com foco em conjuntos de dados desbalanceados e transformados via PCA.")

# Garante que o DataFrame persista durante as intera√ß√µes
if 'df' not in st.session_state:
    st.session_state['df'] = None
    st.session_state['memoria_conclusoes'] = ""
    
# --- M√≥dulo 1: Carregamento de Dados (Para o Teste do Professor) ---

#def load_data(uploaded_file):
#    """Carrega o CSV e inicializa o DataFrame na sess√£o."""
#    try:
#        df = pd.read_csv(uploaded_file)
#        
#        # Realiza uma an√°lise inicial para preencher a mem√≥ria (requisito 4)
#        st.session_state['df'] = df
#        st.session_state['memoria_conclusoes'] = initial_analysis_and_memory(df)
#        
#        st.success("Arquivo carregado com sucesso! Pronto para perguntar.")
#        
#    except Exception as e:
#        st.error(f"Erro ao carregar o arquivo: {e}")
#
# Onde voc√™ salva o DataFrame, salve tamb√©m o objeto de upload
#def load_data(uploaded_file):
#    """Carrega o CSV e inicializa o DataFrame e o objeto de arquivo na sess√£o."""
#    try:
#        df = pd.read_csv(uploaded_file)
#        
#        # Salva o DataFrame e o objeto de arquivo (que LangChain precisa)
#        st.session_state['df'] = df
#        st.session_state['uploaded_file_object'] = uploaded_file # << NOVO
#        st.session_state['memoria_conclusoes'] = initial_analysis_and_memory(df)
#        
#        st.success("Arquivo carregado com sucesso! Pronto para perguntar.")
#        
#    except Exception as e:
#        st.error(f"Erro ao carregar o arquivo: {e}")
#
# Seu c√≥digo, aproximadamente Linha 40

def load_data(uploaded_file):
    """Carrega o CSV, inicializa o DataFrame e reinicia o ponteiro do objeto de arquivo."""
    try:
        # 1. L√™ o arquivo. O ponteiro fica no final.
        df = pd.read_csv(uploaded_file)
        
        # 2. **CRUCIAL**: Reinicia o ponteiro de leitura do objeto de arquivo para o in√≠cio (byte 0).
        # Isso garante que o LangChain possa ler o arquivo a partir do come√ßo.
        uploaded_file.seek(0) # << LINHA CHAVE ADICIONAL
        
        # 3. Salva o DataFrame e o objeto de arquivo na sess√£o
        st.session_state['df'] = df
        st.session_state['uploaded_file_object'] = uploaded_file
        st.session_state['memoria_conclusoes'] = initial_analysis_and_memory(df)
        
        st.success("Arquivo carregado com sucesso! Pronto para perguntar.")
        
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {e}")


# --- M√≥dulo 2: Gera√ß√£o de Conclus√µes Iniciais (A Mem√≥ria) ---

def initial_analysis_and_memory(df: pd.DataFrame) -> str:
    """Realiza an√°lises chaves para preencher a 'mem√≥ria' do agente."""
    
    # 1. An√°lise de Desbalanceamento
    total = len(df)
    fraudes = df['Class'].sum()
    percent_fraude = (fraudes / total) * 100
    
    # 2. Correla√ß√µes Chaves (foco nas vari√°veis PCA mais fortes)
    # Calcule a correla√ß√£o de todas as colunas com 'Class'
    correlations = df.corr()['Class'].sort_values(key=abs, ascending=False).drop('Class')
    top_negative = correlations[correlations < 0].head(3)
    
    # 3. An√°lise da Vari√°vel Amount (para mostrar variabilidade)
    amount_stats = df['Amount'].describe().to_string()
    
    # Constr√≥i o texto de "mem√≥ria" que o agente usar√° na Pergunta 4
    memoria_text = f"""
    O agente realizou uma an√°lise inicial do conjunto de dados e obteve as seguintes conclus√µes:
    
    1. **Desbalanceamento de Classe**: O conjunto de dados √© extremamente desbalanceado. A classe positiva (fraude) representa apenas **{percent_fraude:.3f}%** das transa√ß√µes ({fraudes} fraudes em {total} transa√ß√µes). Qualquer modelo de classifica√ß√£o deve usar m√©tricas como AUPRC.
    
    2. **Vari√°veis PCA Relevantes**: As vari√°veis resultantes da PCA que demonstram a maior correla√ß√£o com a fraude ('Class') s√£o:
        * **V17** (negativa, indicando que valores baixos desta componente est√£o ligados √† fraude).
        * **V14** (negativa, similar √† V17).
        * **V10** (negativa).
        
    3. **Estat√≠sticas da Vari√°vel Amount**: O valor das transa√ß√µes ('Amount') possui uma alta variabilidade. As estat√≠sticas descritivas s√£o:\n{amount_stats}
    
    4. **Padr√£o Temporal (Potencial)**: A vari√°vel 'Time' deve ser analisada cuidadosamente para identificar se as fraudes se concentram em per√≠odos espec√≠ficos do dia (visto que o 'Time' est√° em segundos desde a primeira transa√ß√£o).
    """
    
    return memoria_text


# --- M√≥dulo 3: Cria√ß√£o e Execu√ß√£o do Agente LangChain ---

def create_and_run_agent(file_input, question, llm):
    """Cria e executa o agente LangChain para gerar c√≥digo Python e responder."""
    # 1. CRUCIAL: Reinicia o ponteiro do arquivo para o in√≠cio.
    # Isso resolve o EmptyDataError para a segunda (e subsequentes) chamadas.
    try:
        file_input.seek(0)
    except Exception as e:
        # Adicione um tratamento simples, caso o objeto n√£o tenha o m√©todo .seek()
        # (Embora objetos de upload do Streamlit geralmente tenham)
        st.warning(f"N√£o foi poss√≠vel reiniciar o ponteiro do arquivo: {e}")

    # 2. Cria o agente, que ler√° o arquivo do in√≠cio
    
    # Define as configura√ß√µes do agente
    agent = create_csv_agent(
        llm,
        file_input, 
        verbose=True, 
        agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        allow_dangerous_code=True, 
        agent_executor_kwargs={"handle_parsing_errors": True},
        #prefix="Voc√™ √© um especialista em an√°lise de dados e estat√≠stica. Seu objetivo √© ajudar um usu√°rio a realizar Exploratory Data Analysis (EDA) em um DataFrame pandas chamado 'df', que cont√©m dados de transa√ß√µes de cart√£o de cr√©dito. As colunas V1 a V28 s√£o o resultado de uma transforma√ß√£o PCA. A coluna 'Class' (1=fraude, 0=normal) √© o alvo. Sempre que poss√≠vel e aplic√°vel, **gere um gr√°fico** para visualizar o resultado, salvando-o em um arquivo .png e exibindo o arquivo. N√£o use a fun√ß√£o `print()`, apenas gere o resultado final.",
        prefix="Voc√™ √© um especialista em an√°lise de dados e estat√≠stica. Seu objetivo n√£o √© apenas gerar c√≥digo Python e gr√°ficos, mas **sempre interpretar a sa√≠da ou o gr√°fico gerado** antes de retornar a resposta. A resposta final deve ser a **conclus√£o anal√≠tica** em texto, seguida pelo artefato (o gr√°fico). Analise as correla√ß√µes, distribui√ß√µes e padr√µes e explique o que encontrou.",
        max_iterations=15 # Limita o n√∫mero de tentativas
    )

    try:
        # Executa o agente
        with st.spinner("O Agente est√° pensando, gerando e executando o c√≥digo Python..."):
            response = agent.run(question)
            return response
            
    except Exception as e:
        # Se o agente falhar (ex: erro no c√≥digo Python gerado)
        return f"O agente encontrou um erro: {e}. Por favor, tente reformular a pergunta. Detalhes: A execu√ß√£o do c√≥digo falhou."


# --- Sidebar e Intera√ß√£o do Usu√°rio ---

with st.sidebar:
    st.header("Upload do Dataset")
    uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")

    if uploaded_file is not None and st.session_state['df'] is None:
        load_data(uploaded_file)
        
    st.header("Configura√ß√£o da LLM")
    
    # Use a chave da .env, mas permite que o usu√°rio sobrescreva
    api_key = os.getenv("OPENAI_API_KEY", "") 
    openai_api_key = st.text_input("Sua Chave OpenAI API", type="password", value=api_key)
    
    if openai_api_key:
        llm = OpenAI(openai_api_key=openai_api_key, temperature=0.0)
    else:
        st.warning("Por favor, insira sua chave da OpenAI ou configure o arquivo .env.")
        llm = None
        
    st.markdown("---")
    st.markdown("Requisitos do Trabalho:")
    st.markdown("- 4 Perguntas (sendo 1 gr√°fica)")
    st.markdown("- 1 Pergunta sobre as conclus√µes (Mem√≥ria)")
    
# --- Interface Principal de Perguntas e Respostas ---

if st.session_state['df'] is not None and llm is not None:
    
    # Exemplo de perguntas para guiar o usu√°rio e o professor
    st.subheader("Exemplos de Perguntas:")
    st.markdown("""
    1. **Estat√≠stica:** Qual o desvio padr√£o e a m√©dia da vari√°vel 'Time'?
    2. **Rela√ß√£o Gr√°fica:** Mostre um boxplot da vari√°vel 'Amount' para a classe de fraude (Class=1) versus a classe normal (Class=0).
    3. **Padr√£o:** Qual a correla√ß√£o da vari√°vel V17 com a vari√°vel 'Class'?
    4. **Conclus√µes (Mem√≥ria):** Quais as conclus√µes que voc√™ obteve a partir da an√°lise inicial dos dados?
    """)
    
    user_question = st.text_input("Insira sua pergunta de EDA aqui:", key="user_input")

    if user_question:
        
        # --- L√≥gica do M√≥dulo de Mem√≥ria ---
        if "conclus√µes" in user_question.lower() or "an√°lise inicial" in user_question.lower():
            # Se for uma pergunta sobre a mem√≥ria, usa a an√°lise inicial preenchida
            st.info("Resposta baseada na An√°lise Inicial (Mem√≥ria do Agente):")
            st.markdown(st.session_state['memoria_conclusoes'])
            
        # --- L√≥gica do M√≥dulo de Execu√ß√£o de C√≥digo ---
        else:
            # Roda o agente LangChain para gerar e executar o c√≥digo
            #response = create_and_run_agent(st.session_state['df'], user_question, llm)
            response = create_and_run_agent(st.session_state['uploaded_file_object'], user_question, llm) # << USE ISSO
            
            # Formata a resposta
            st.subheader("Resposta do Agente:")
            
            # Tenta exibir o gr√°fico gerado (se houver)
            # O LangChain salva o gr√°fico em um buffer tempor√°rio que precisamos capturar.
            # Este √© um padr√£o comum em agentes de c√≥digo.
            try:
                # O LangChain muitas vezes gera e exibe gr√°ficos automaticamente.
                # Se precisar de um controle mais fino:
                # Crie uma pasta 'plots' e instrua a LLM a salvar l√°.
                
                # Para simplificar, vamos instruir a LLM a gerar e o Streamlit a exibir o √∫ltimo plot.
                st.write(response) # Exibe o texto da resposta
                if plt.get_fignums():
                    # Se houver uma figura ativa ap√≥s a execu√ß√£o do c√≥digo, mostre-a
                    st.pyplot(plt.gcf())
                    
            except Exception as e:
                st.write(f"Resposta do Agente: {response}")
                st.error(f"N√£o foi poss√≠vel exibir o gr√°fico. {e}")
                

else:
    st.info("Por favor, carregue um arquivo CSV e insira sua chave da API para come√ßar.")

